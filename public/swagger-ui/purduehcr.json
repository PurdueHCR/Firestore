{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "PurdueHCR API",
    "contact" : {
      "email" : "purduehcr@gmail.com"
    },
    "version" : "1.0.0-oas3"
  },
  "servers" : [ {
    "url" : "https://us-central1-purdue-hcr-test.cloudfunctions.net",
    "description" : "Sandbox server (uses test data)"
  }, {
    "url" : "https://us-central1-hcr-points.cloudfunctions.net",
    "description" : "Production server (uses live data)"
  } ],
  "tags" : [ {
    "name" : "user"
  }, {
    "name" : "competition"
  }, {
    "name" : "point"
  } ],
  "paths" : {
    "/user/auth-rank" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Returns the user's overall house rank and semester rank.",
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Firebase_ID_Token",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "Bearer XXXXXXXXXXXXXXXXXXX"
        } ],
        "responses" : {
          "200" : {
            "description" : "A JSON object with the user's house rank and semester rank",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "401" : {
            "description" : "Not Authorized On Firebase: Could not verify user account with given Firebase ID Token"
          },
          "409" : {
            "description" : "Conflict: Bad User Data"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/user/create" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "After a FirebaseUser account has been created, this will create the user model in the database",
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Firebase_ID_Token",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "Bearer XXXXXXXXXXXXXXXXXXX"
        }, {
          "name" : "first",
          "in" : "query",
          "description" : "The users preferred first name",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "John"
        }, {
          "name" : "last",
          "in" : "query",
          "description" : "The users preferred last name",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Purdue"
        }, {
          "name" : "code",
          "in" : "query",
          "description" : "The user provided house code that will connect a user with a house",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "4N1234"
        } ],
        "responses" : {
          "200" : {
            "description" : "User was successfully created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Firestore failed with error:"
          },
          "401" : {
            "description" : "Not Authorized On Firebase: Could not verify account with given Firebase ID Token"
          },
          "409" : {
            "description" : "House Code Does Not Exist"
          },
          "421" : {
            "description" : "User already exists"
          },
          "422" : {
            "description" : "Missing required parameters"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/point/submit" : {
      "post" : {
        "tags" : [ "point" ],
        "summary" : "Submit a point log for a user",
        "parameters" : [ {
          "name" : "User-Auth",
          "in" : "header",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "point-type-id",
          "in" : "query",
          "description" : "The ID of the Point Type that this was submitted under.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "description",
          "in" : "query",
          "description" : "User reported description of what they did for this subission.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "date-occurred",
          "in" : "query",
          "description" : "User reported date that they did this activity",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "documentId",
          "in" : "query",
          "description" : "ID for the point log document to have. Used for single use QR codes",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The Point Log was successfully submitted for the resident and an approval request was sent to an RHP."
          },
          "202" : {
            "description" : "The Point Log was successfully submitted and was automatically approved."
          },
          "401" : {
            "description" : "Not Authorized"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        },
        "deprecated" : true
      }
    },
    "/competition/save-semester-points" : {
      "post" : {
        "tags" : [ "competition" ],
        "summary" : "Request a confirmation email sent to the user's account that contains information on how to save the current points total for all users. This can only be performed by an REA/REC.",
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Firebase_ID_Token",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "Bearer XXXXXXXXXXXXXXXXXXX"
        } ],
        "responses" : {
          "200" : {
            "description" : "Confirmation sent"
          },
          "401" : {
            "description" : "Unauthorized: Confirm the token is valid."
          },
          "409" : {
            "description" : "User does not have sufficient permissions to perform this action."
          },
          "410" : {
            "description" : "Undefined User Role"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/competition/reset-house-competition" : {
      "post" : {
        "tags" : [ "competition" ],
        "summary" : "Request a confirmation email sent to the user's account that contains information on how to reset the house competition. This will delete all submitted points, delete all QR codes, delete all users, and reset house scores. This can only be performed by an REA/REC.",
        "parameters" : [ {
          "name" : "Authorization",
          "in" : "header",
          "description" : "Bearer Firebase_ID_Token",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "Bearer XXXXXXXXXXXXXXXXXXX"
        } ],
        "responses" : {
          "200" : {
            "description" : "Confirmation sent"
          },
          "401" : {
            "description" : "Unauthorized: Confirm the token is valid."
          },
          "409" : {
            "description" : "User does not have sufficient permissions to perform this action."
          },
          "410" : {
            "description" : "Undefined User Role"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "23p9vd123iohfds09aserh"
          },
          "firstName" : {
            "type" : "string",
            "example" : "Mitch"
          },
          "lastName" : {
            "type" : "string",
            "example" : "Daniels"
          },
          "floorId" : {
            "type" : "string",
            "example" : "4N"
          },
          "house" : {
            "type" : "string",
            "example" : "Platinum"
          },
          "lastSemesterPoints" : {
            "type" : "integer",
            "example" : 200
          },
          "totalPoints" : {
            "type" : "integer",
            "example" : 325
          },
          "permissionLevel" : {
            "type" : "integer",
            "example" : 0
          }
        }
      },
      "inline_response_200" : {
        "type" : "object",
        "properties" : {
          "house-rank" : {
            "type" : "integer",
            "example" : 2
          },
          "semester-rank" : {
            "type" : "integer",
            "example" : 10
          }
        }
      }
    }
  }
}